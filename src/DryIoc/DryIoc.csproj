<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFrameworks>net45;netstandard2.0;netstandard2.1</TargetFrameworks>

        <Product>DryIoc</Product>
        <VersionPrefix>5.3.4</VersionPrefix>
        <VersionSuffix></VersionSuffix>

        <AssemblyName>$(Product)</AssemblyName>
        <AssemblyTitle>$(AssemblyName) $(TargetFramework)</AssemblyTitle>

        <PackageId>$(Product).dll</PackageId>
        <Title>$(Product).dll</Title>
        <Description>DryIoc is fast, small, full-featured IoC Container for .NET</Description>
        <PackageTags>IoC Container Inversion-of-Control DI Dependency-Injection DRY Service-Provider Factory FastExpressionCompiler ImTools</PackageTags>
        <PackageReleaseNotes>
<![CDATA[
## v5.3.4 Bug-fix release

- fixed: #559 Possible inconsistent behaviour of resolving collection of services opening resolution scope
- fixed: #560 Fix GetWrappedType implementation(s) to not return null


## v5.3.3 Bug-fix release

- fixed: #555 Is there anyway to apply ConcreteTypeDynamicRegistrations to Rules.MicrosoftDependencyInjectionRules
- fixed: #557 Rules.WithFactorySelector(Rules.SelectLastRegisteredFactory()) allows to Resolve the keyed service as non-keyed


## v5.3.2 Bug-fix release

- fixed: #554 System.NullReferenceException: Object reference not set to an instance of an object.


## v5.3.1 Bug-fix release

-fixed: #546 Generic type constraint resolution doesn't see arrays as IEnumerable<>


## v5.3.0 Small feature and bug-fix release

-fixed: #536 DryIoc Exception in a Constructor of a Dependency does tunnel through Resolve call


## v5.2.2 Bug-fix release

-fixed: #519 Exception thrown when using WebOptimizer in ASP.NET Core MVC


## v5.2.1 Bug-fix release

-fixed: #516 Singleton Decorator to Scoped base shouldn't work, but does


## v5.2.0 Small feature and bug-fix release

### Features

- Adding `WithConcreteTypeDynamicRegistrations` overload with `IfUnresolved ifConcreteTypeIsUnresolved` parameter 
to control exception information, and rule fallback behavior (#506)
- Small speed-ups 

### Fixes

- #507 Transient resolve with opening scope using factory func in singleton

]]>
    </PackageReleaseNotes>
    </PropertyGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
        <PackageReference Include="System.Reflection.Emit.Lightweight" Version="4.7.0" />
    </ItemGroup>

    <ItemGroup>
        <T4File Include="Container.Generated.tt" />
    </ItemGroup>

    <Target Name="CompileTimeGenerate" BeforeTargets="BeforeBuild"
        Condition=" '$(Configuration)' == 'Debug' AND Exists('$(TargetPath)')">

        <Message Text="Generating the compile-time registrations graphs..." Importance="high"/>
        <Message Text="[TargetDir=$(TargetDir)]" Importance="high"/>

        <Exec WorkingDirectory="$(ProjectDir)" Command="dotnet tool restore" />
        <Exec WorkingDirectory="$(ProjectDir)" Command="dotnet t4 -P=$(TargetDir) %(T4File.Identity)" />
    </Target>

    <ItemGroup>
      <Compile Update="Container.Generated.cs">
        <DesignTime>True</DesignTime>
        <AutoGen>True</AutoGen>
        <DependentUpon>Container.Generated.tt</DependentUpon>
      </Compile>
    </ItemGroup>

    <ItemGroup>
      <None Update="Container.Generated.tt">
        <Generator>TextTemplatingFileGenerator</Generator>
        <LastGenOutput>Container.Generated.cs</LastGenOutput>
      </None>
    </ItemGroup>

</Project>
